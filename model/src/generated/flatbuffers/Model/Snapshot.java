// automatically generated by the FlatBuffers compiler, do not modify

package Model;

import java.nio.*;
import java.lang.*;

import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Snapshot extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Snapshot getRootAsSnapshot(ByteBuffer _bb) { return getRootAsSnapshot(_bb, new Snapshot()); }
  public static Snapshot getRootAsSnapshot(ByteBuffer _bb, Snapshot obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Snapshot __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float time() { int o = __offset(4); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public Model.AgentSnapshot snapshots(int j) { return snapshots(new Model.AgentSnapshot(), j); }
  public Model.AgentSnapshot snapshots(Model.AgentSnapshot obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int snapshotsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public Model.AgentSnapshot.Vector snapshotsVector() { return snapshotsVector(new Model.AgentSnapshot.Vector()); }
  public Model.AgentSnapshot.Vector snapshotsVector(Model.AgentSnapshot.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public Model.Error errors(int j) { return errors(new Model.Error(), j); }
  public Model.Error errors(Model.Error obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int errorsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public Model.Error.Vector errorsVector() { return errorsVector(new Model.Error.Vector()); }
  public Model.Error.Vector errorsVector(Model.Error.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createSnapshot(FlatBufferBuilder builder,
      float time,
      int snapshotsOffset,
      int errorsOffset) {
    builder.startTable(3);
    Snapshot.addErrors(builder, errorsOffset);
    Snapshot.addSnapshots(builder, snapshotsOffset);
    Snapshot.addTime(builder, time);
    return Snapshot.endSnapshot(builder);
  }

  public static void startSnapshot(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addTime(FlatBufferBuilder builder, float time) { builder.addFloat(0, time, 0.0f); }
  public static void addSnapshots(FlatBufferBuilder builder, int snapshotsOffset) { builder.addOffset(1, snapshotsOffset, 0); }
  public static int createSnapshotsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSnapshotsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addErrors(FlatBufferBuilder builder, int errorsOffset) { builder.addOffset(2, errorsOffset, 0); }
  public static int createErrorsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startErrorsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endSnapshot(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Snapshot get(int j) { return get(new Snapshot(), j); }
    public Snapshot get(Snapshot obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

