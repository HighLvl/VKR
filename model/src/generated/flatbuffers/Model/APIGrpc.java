//Generated by flatc compiler (version 2.0.0)
//If you make any local changes, they will be lost
//source: Model.fbs

package Model;

import com.google.flatbuffers.grpc.FlatbuffersUtils;

import java.nio.ByteBuffer;
import static io.grpc.MethodDescriptor.generateFullMethodName;
import static io.grpc.stub.ClientCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ClientCalls.asyncClientStreamingCall;
import static io.grpc.stub.ClientCalls.asyncServerStreamingCall;
import static io.grpc.stub.ClientCalls.asyncUnaryCall;
import static io.grpc.stub.ClientCalls.blockingServerStreamingCall;
import static io.grpc.stub.ClientCalls.blockingUnaryCall;
import static io.grpc.stub.ClientCalls.futureUnaryCall;
import static io.grpc.stub.ServerCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ServerCalls.asyncClientStreamingCall;
import static io.grpc.stub.ServerCalls.asyncServerStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnaryCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall;

/**
 */
@javax.annotation.Generated(
    value = "by gRPC proto compiler",
    comments = "Source: Model.fbs")
public final class APIGrpc {

  private APIGrpc() {}
  
  public static final String SERVICE_NAME = "Model.API";
  
  // Static method descriptors that strictly reflect the proto.
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  @java.lang.Deprecated // Use {@link #getConnectMethod()} instead. 
  public static final io.grpc.MethodDescriptor<Model.Empty,
      Model.ModelState> METHOD_CONNECT = getConnectMethod();
  
  private static volatile io.grpc.MethodDescriptor<Model.Empty,
      Model.ModelState> getConnectMethod;
  
  private static volatile FlatbuffersUtils.FBExtactor<Model.Empty> extractorOfEmpty;
  private static FlatbuffersUtils.FBExtactor<Model.Empty> getExtractorOfEmpty() {
      if (extractorOfEmpty != null) return extractorOfEmpty;
      synchronized (APIGrpc.class) {
          if (extractorOfEmpty != null) return extractorOfEmpty;
          extractorOfEmpty = new FlatbuffersUtils.FBExtactor<Model.Empty>() {
              public Model.Empty extract (ByteBuffer buffer) {
                  return Model.Empty.getRootAsEmpty(buffer);
              }
          };
          return extractorOfEmpty;
      }
  }
  
  private static volatile FlatbuffersUtils.FBExtactor<Model.ModelState> extractorOfModelState;
  private static FlatbuffersUtils.FBExtactor<Model.ModelState> getExtractorOfModelState() {
      if (extractorOfModelState != null) return extractorOfModelState;
      synchronized (APIGrpc.class) {
          if (extractorOfModelState != null) return extractorOfModelState;
          extractorOfModelState = new FlatbuffersUtils.FBExtactor<Model.ModelState>() {
              public Model.ModelState extract (ByteBuffer buffer) {
                  return Model.ModelState.getRootAsModelState(buffer);
              }
          };
          return extractorOfModelState;
      }
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static io.grpc.MethodDescriptor<Model.Empty,
      Model.ModelState> getConnectMethod() {
    io.grpc.MethodDescriptor<Model.Empty, Model.ModelState> getConnectMethod;
    if ((getConnectMethod = APIGrpc.getConnectMethod) == null) {
      synchronized (APIGrpc.class) {
        if ((getConnectMethod = APIGrpc.getConnectMethod) == null) {
          APIGrpc.getConnectMethod = getConnectMethod = 
              io.grpc.MethodDescriptor.<Model.Empty, Model.ModelState>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "Model.API", "Connect"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  Model.Empty.class, getExtractorOfEmpty()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  Model.ModelState.class, getExtractorOfModelState()))
                  .setSchemaDescriptor(null)
                  .build();
          }
        }
     }
     return getConnectMethod;
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  @java.lang.Deprecated // Use {@link #getRunMethod()} instead. 
  public static final io.grpc.MethodDescriptor<Model.GlobalArgs,
      Model.Empty> METHOD_RUN = getRunMethod();
  
  private static volatile io.grpc.MethodDescriptor<Model.GlobalArgs,
      Model.Empty> getRunMethod;
  
  private static volatile FlatbuffersUtils.FBExtactor<Model.GlobalArgs> extractorOfGlobalArgs;
  private static FlatbuffersUtils.FBExtactor<Model.GlobalArgs> getExtractorOfGlobalArgs() {
      if (extractorOfGlobalArgs != null) return extractorOfGlobalArgs;
      synchronized (APIGrpc.class) {
          if (extractorOfGlobalArgs != null) return extractorOfGlobalArgs;
          extractorOfGlobalArgs = new FlatbuffersUtils.FBExtactor<Model.GlobalArgs>() {
              public Model.GlobalArgs extract (ByteBuffer buffer) {
                  return Model.GlobalArgs.getRootAsGlobalArgs(buffer);
              }
          };
          return extractorOfGlobalArgs;
      }
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static io.grpc.MethodDescriptor<Model.GlobalArgs,
      Model.Empty> getRunMethod() {
    io.grpc.MethodDescriptor<Model.GlobalArgs, Model.Empty> getRunMethod;
    if ((getRunMethod = APIGrpc.getRunMethod) == null) {
      synchronized (APIGrpc.class) {
        if ((getRunMethod = APIGrpc.getRunMethod) == null) {
          APIGrpc.getRunMethod = getRunMethod = 
              io.grpc.MethodDescriptor.<Model.GlobalArgs, Model.Empty>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "Model.API", "Run"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  Model.GlobalArgs.class, getExtractorOfGlobalArgs()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  Model.Empty.class, getExtractorOfEmpty()))
                  .setSchemaDescriptor(null)
                  .build();
          }
        }
     }
     return getRunMethod;
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  @java.lang.Deprecated // Use {@link #getRunAndSubscribeOnUpdateMethod()} instead. 
  public static final io.grpc.MethodDescriptor<Model.GlobalArgs,
      Model.Empty> METHOD_RUN_AND_SUBSCRIBE_ON_UPDATE = getRunAndSubscribeOnUpdateMethod();
  
  private static volatile io.grpc.MethodDescriptor<Model.GlobalArgs,
      Model.Empty> getRunAndSubscribeOnUpdateMethod;
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static io.grpc.MethodDescriptor<Model.GlobalArgs,
      Model.Empty> getRunAndSubscribeOnUpdateMethod() {
    io.grpc.MethodDescriptor<Model.GlobalArgs, Model.Empty> getRunAndSubscribeOnUpdateMethod;
    if ((getRunAndSubscribeOnUpdateMethod = APIGrpc.getRunAndSubscribeOnUpdateMethod) == null) {
      synchronized (APIGrpc.class) {
        if ((getRunAndSubscribeOnUpdateMethod = APIGrpc.getRunAndSubscribeOnUpdateMethod) == null) {
          APIGrpc.getRunAndSubscribeOnUpdateMethod = getRunAndSubscribeOnUpdateMethod = 
              io.grpc.MethodDescriptor.<Model.GlobalArgs, Model.Empty>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
              .setFullMethodName(generateFullMethodName(
                  "Model.API", "RunAndSubscribeOnUpdate"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  Model.GlobalArgs.class, getExtractorOfGlobalArgs()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  Model.Empty.class, getExtractorOfEmpty()))
                  .setSchemaDescriptor(null)
                  .build();
          }
        }
     }
     return getRunAndSubscribeOnUpdateMethod;
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  @java.lang.Deprecated // Use {@link #getCallBehaviourFunctionsMethod()} instead. 
  public static final io.grpc.MethodDescriptor<Model.Behaviour,
      Model.Empty> METHOD_CALL_BEHAVIOUR_FUNCTIONS = getCallBehaviourFunctionsMethod();
  
  private static volatile io.grpc.MethodDescriptor<Model.Behaviour,
      Model.Empty> getCallBehaviourFunctionsMethod;
  
  private static volatile FlatbuffersUtils.FBExtactor<Model.Behaviour> extractorOfBehaviour;
  private static FlatbuffersUtils.FBExtactor<Model.Behaviour> getExtractorOfBehaviour() {
      if (extractorOfBehaviour != null) return extractorOfBehaviour;
      synchronized (APIGrpc.class) {
          if (extractorOfBehaviour != null) return extractorOfBehaviour;
          extractorOfBehaviour = new FlatbuffersUtils.FBExtactor<Model.Behaviour>() {
              public Model.Behaviour extract (ByteBuffer buffer) {
                  return Model.Behaviour.getRootAsBehaviour(buffer);
              }
          };
          return extractorOfBehaviour;
      }
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static io.grpc.MethodDescriptor<Model.Behaviour,
      Model.Empty> getCallBehaviourFunctionsMethod() {
    io.grpc.MethodDescriptor<Model.Behaviour, Model.Empty> getCallBehaviourFunctionsMethod;
    if ((getCallBehaviourFunctionsMethod = APIGrpc.getCallBehaviourFunctionsMethod) == null) {
      synchronized (APIGrpc.class) {
        if ((getCallBehaviourFunctionsMethod = APIGrpc.getCallBehaviourFunctionsMethod) == null) {
          APIGrpc.getCallBehaviourFunctionsMethod = getCallBehaviourFunctionsMethod = 
              io.grpc.MethodDescriptor.<Model.Behaviour, Model.Empty>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "Model.API", "CallBehaviourFunctions"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  Model.Behaviour.class, getExtractorOfBehaviour()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  Model.Empty.class, getExtractorOfEmpty()))
                  .setSchemaDescriptor(null)
                  .build();
          }
        }
     }
     return getCallBehaviourFunctionsMethod;
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  @java.lang.Deprecated // Use {@link #getRequestSnapshotMethod()} instead. 
  public static final io.grpc.MethodDescriptor<Model.Empty,
      Model.Snapshot> METHOD_REQUEST_SNAPSHOT = getRequestSnapshotMethod();
  
  private static volatile io.grpc.MethodDescriptor<Model.Empty,
      Model.Snapshot> getRequestSnapshotMethod;
  
  private static volatile FlatbuffersUtils.FBExtactor<Model.Snapshot> extractorOfSnapshot;
  private static FlatbuffersUtils.FBExtactor<Model.Snapshot> getExtractorOfSnapshot() {
      if (extractorOfSnapshot != null) return extractorOfSnapshot;
      synchronized (APIGrpc.class) {
          if (extractorOfSnapshot != null) return extractorOfSnapshot;
          extractorOfSnapshot = new FlatbuffersUtils.FBExtactor<Model.Snapshot>() {
              public Model.Snapshot extract (ByteBuffer buffer) {
                  return Model.Snapshot.getRootAsSnapshot(buffer);
              }
          };
          return extractorOfSnapshot;
      }
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static io.grpc.MethodDescriptor<Model.Empty,
      Model.Snapshot> getRequestSnapshotMethod() {
    io.grpc.MethodDescriptor<Model.Empty, Model.Snapshot> getRequestSnapshotMethod;
    if ((getRequestSnapshotMethod = APIGrpc.getRequestSnapshotMethod) == null) {
      synchronized (APIGrpc.class) {
        if ((getRequestSnapshotMethod = APIGrpc.getRequestSnapshotMethod) == null) {
          APIGrpc.getRequestSnapshotMethod = getRequestSnapshotMethod = 
              io.grpc.MethodDescriptor.<Model.Empty, Model.Snapshot>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "Model.API", "RequestSnapshot"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  Model.Empty.class, getExtractorOfEmpty()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  Model.Snapshot.class, getExtractorOfSnapshot()))
                  .setSchemaDescriptor(null)
                  .build();
          }
        }
     }
     return getRequestSnapshotMethod;
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  @java.lang.Deprecated // Use {@link #getPauseMethod()} instead. 
  public static final io.grpc.MethodDescriptor<Model.Empty,
      Model.Empty> METHOD_PAUSE = getPauseMethod();
  
  private static volatile io.grpc.MethodDescriptor<Model.Empty,
      Model.Empty> getPauseMethod;
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static io.grpc.MethodDescriptor<Model.Empty,
      Model.Empty> getPauseMethod() {
    io.grpc.MethodDescriptor<Model.Empty, Model.Empty> getPauseMethod;
    if ((getPauseMethod = APIGrpc.getPauseMethod) == null) {
      synchronized (APIGrpc.class) {
        if ((getPauseMethod = APIGrpc.getPauseMethod) == null) {
          APIGrpc.getPauseMethod = getPauseMethod = 
              io.grpc.MethodDescriptor.<Model.Empty, Model.Empty>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "Model.API", "Pause"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  Model.Empty.class, getExtractorOfEmpty()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  Model.Empty.class, getExtractorOfEmpty()))
                  .setSchemaDescriptor(null)
                  .build();
          }
        }
     }
     return getPauseMethod;
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  @java.lang.Deprecated // Use {@link #getResumeMethod()} instead. 
  public static final io.grpc.MethodDescriptor<Model.Empty,
      Model.Empty> METHOD_RESUME = getResumeMethod();
  
  private static volatile io.grpc.MethodDescriptor<Model.Empty,
      Model.Empty> getResumeMethod;
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static io.grpc.MethodDescriptor<Model.Empty,
      Model.Empty> getResumeMethod() {
    io.grpc.MethodDescriptor<Model.Empty, Model.Empty> getResumeMethod;
    if ((getResumeMethod = APIGrpc.getResumeMethod) == null) {
      synchronized (APIGrpc.class) {
        if ((getResumeMethod = APIGrpc.getResumeMethod) == null) {
          APIGrpc.getResumeMethod = getResumeMethod = 
              io.grpc.MethodDescriptor.<Model.Empty, Model.Empty>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "Model.API", "Resume"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  Model.Empty.class, getExtractorOfEmpty()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  Model.Empty.class, getExtractorOfEmpty()))
                  .setSchemaDescriptor(null)
                  .build();
          }
        }
     }
     return getResumeMethod;
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  @java.lang.Deprecated // Use {@link #getStopMethod()} instead. 
  public static final io.grpc.MethodDescriptor<Model.Empty,
      Model.Empty> METHOD_STOP = getStopMethod();
  
  private static volatile io.grpc.MethodDescriptor<Model.Empty,
      Model.Empty> getStopMethod;
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static io.grpc.MethodDescriptor<Model.Empty,
      Model.Empty> getStopMethod() {
    io.grpc.MethodDescriptor<Model.Empty, Model.Empty> getStopMethod;
    if ((getStopMethod = APIGrpc.getStopMethod) == null) {
      synchronized (APIGrpc.class) {
        if ((getStopMethod = APIGrpc.getStopMethod) == null) {
          APIGrpc.getStopMethod = getStopMethod = 
              io.grpc.MethodDescriptor.<Model.Empty, Model.Empty>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "Model.API", "Stop"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  Model.Empty.class, getExtractorOfEmpty()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  Model.Empty.class, getExtractorOfEmpty()))
                  .setSchemaDescriptor(null)
                  .build();
          }
        }
     }
     return getStopMethod;
  }
  
  /**
   * Creates a new async stub that supports all call types for the service
   */
  public static APIStub newStub(io.grpc.Channel channel) {
    return new APIStub(channel);
  }
  
  /**
   * Creates a new blocking-style stub that supports unary and streaming output calls on the service
   */
  public static APIBlockingStub newBlockingStub(
      io.grpc.Channel channel) {
    return new APIBlockingStub(channel);
  }
  
  /**
   * Creates a new ListenableFuture-style stub that supports unary calls on the service
   */
  public static APIFutureStub newFutureStub(
      io.grpc.Channel channel) {
    return new APIFutureStub(channel);
  }
  
  /**
   */
  public static abstract class APIImplBase implements io.grpc.BindableService {
    
    /**
     */
    public     void connect(Model.Empty request,
        io.grpc.stub.StreamObserver<Model.ModelState> responseObserver)     {
      asyncUnimplementedUnaryCall(getConnectMethod(), responseObserver);
    }
    
    /**
     */
    public     void run(Model.GlobalArgs request,
        io.grpc.stub.StreamObserver<Model.Empty> responseObserver)     {
      asyncUnimplementedUnaryCall(getRunMethod(), responseObserver);
    }
    
    /**
     */
    public     void runAndSubscribeOnUpdate(Model.GlobalArgs request,
        io.grpc.stub.StreamObserver<Model.Empty> responseObserver)     {
      asyncUnimplementedUnaryCall(getRunAndSubscribeOnUpdateMethod(), responseObserver);
    }
    
    /**
     */
    public     void callBehaviourFunctions(Model.Behaviour request,
        io.grpc.stub.StreamObserver<Model.Empty> responseObserver)     {
      asyncUnimplementedUnaryCall(getCallBehaviourFunctionsMethod(), responseObserver);
    }
    
    /**
     */
    public     void requestSnapshot(Model.Empty request,
        io.grpc.stub.StreamObserver<Model.Snapshot> responseObserver)     {
      asyncUnimplementedUnaryCall(getRequestSnapshotMethod(), responseObserver);
    }
    
    /**
     */
    public     void pause(Model.Empty request,
        io.grpc.stub.StreamObserver<Model.Empty> responseObserver)     {
      asyncUnimplementedUnaryCall(getPauseMethod(), responseObserver);
    }
    
    /**
     */
    public     void resume(Model.Empty request,
        io.grpc.stub.StreamObserver<Model.Empty> responseObserver)     {
      asyncUnimplementedUnaryCall(getResumeMethod(), responseObserver);
    }
    
    /**
     */
    public     void stop(Model.Empty request,
        io.grpc.stub.StreamObserver<Model.Empty> responseObserver)     {
      asyncUnimplementedUnaryCall(getStopMethod(), responseObserver);
    }
    
    @java.lang.Override public final io.grpc.ServerServiceDefinition bindService() {
      return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())
          .addMethod(
            getConnectMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                Model.Empty,
                Model.ModelState>(
                  this, METHODID_CONNECT)))
          .addMethod(
            getRunMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                Model.GlobalArgs,
                Model.Empty>(
                  this, METHODID_RUN)))
          .addMethod(
            getRunAndSubscribeOnUpdateMethod(),
            asyncServerStreamingCall(
              new MethodHandlers<
                Model.GlobalArgs,
                Model.Empty>(
                  this, METHODID_RUN_AND_SUBSCRIBE_ON_UPDATE)))
          .addMethod(
            getCallBehaviourFunctionsMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                Model.Behaviour,
                Model.Empty>(
                  this, METHODID_CALL_BEHAVIOUR_FUNCTIONS)))
          .addMethod(
            getRequestSnapshotMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                Model.Empty,
                Model.Snapshot>(
                  this, METHODID_REQUEST_SNAPSHOT)))
          .addMethod(
            getPauseMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                Model.Empty,
                Model.Empty>(
                  this, METHODID_PAUSE)))
          .addMethod(
            getResumeMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                Model.Empty,
                Model.Empty>(
                  this, METHODID_RESUME)))
          .addMethod(
            getStopMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                Model.Empty,
                Model.Empty>(
                  this, METHODID_STOP)))
          .build();
    }
  }
  
  /**
   */
  public static final class APIStub extends io.grpc.stub.AbstractStub<APIStub> {
    private APIStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private APIStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected APIStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new APIStub(channel, callOptions);
    }
    
    /**
     */
    public     void connect(Model.Empty request,
        io.grpc.stub.StreamObserver<Model.ModelState> responseObserver)     {
      asyncUnaryCall(
          getChannel().newCall(getConnectMethod(), getCallOptions()), request, responseObserver);
    }
    
    /**
     */
    public     void run(Model.GlobalArgs request,
        io.grpc.stub.StreamObserver<Model.Empty> responseObserver)     {
      asyncUnaryCall(
          getChannel().newCall(getRunMethod(), getCallOptions()), request, responseObserver);
    }
    
    /**
     */
    public     void runAndSubscribeOnUpdate(Model.GlobalArgs request,
        io.grpc.stub.StreamObserver<Model.Empty> responseObserver)     {
      asyncServerStreamingCall(
          getChannel().newCall(getRunAndSubscribeOnUpdateMethod(), getCallOptions()), request, responseObserver);
    }
    
    /**
     */
    public     void callBehaviourFunctions(Model.Behaviour request,
        io.grpc.stub.StreamObserver<Model.Empty> responseObserver)     {
      asyncUnaryCall(
          getChannel().newCall(getCallBehaviourFunctionsMethod(), getCallOptions()), request, responseObserver);
    }
    
    /**
     */
    public     void requestSnapshot(Model.Empty request,
        io.grpc.stub.StreamObserver<Model.Snapshot> responseObserver)     {
      asyncUnaryCall(
          getChannel().newCall(getRequestSnapshotMethod(), getCallOptions()), request, responseObserver);
    }
    
    /**
     */
    public     void pause(Model.Empty request,
        io.grpc.stub.StreamObserver<Model.Empty> responseObserver)     {
      asyncUnaryCall(
          getChannel().newCall(getPauseMethod(), getCallOptions()), request, responseObserver);
    }
    
    /**
     */
    public     void resume(Model.Empty request,
        io.grpc.stub.StreamObserver<Model.Empty> responseObserver)     {
      asyncUnaryCall(
          getChannel().newCall(getResumeMethod(), getCallOptions()), request, responseObserver);
    }
    
    /**
     */
    public     void stop(Model.Empty request,
        io.grpc.stub.StreamObserver<Model.Empty> responseObserver)     {
      asyncUnaryCall(
          getChannel().newCall(getStopMethod(), getCallOptions()), request, responseObserver);
    }
  }
  
  /**
   */
  public static final class APIBlockingStub extends io.grpc.stub.AbstractStub<APIBlockingStub> {
    private APIBlockingStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private APIBlockingStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected APIBlockingStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new APIBlockingStub(channel, callOptions);
    }
    
    /**
     */
    public     Model.ModelState connect(Model.Empty request)     {
      return blockingUnaryCall(
          getChannel(), getConnectMethod(), getCallOptions(), request);
    }
    
    /**
     */
    public     Model.Empty run(Model.GlobalArgs request)     {
      return blockingUnaryCall(
          getChannel(), getRunMethod(), getCallOptions(), request);
    }
    
    /**
     */
    public     java.util.Iterator<Model.Empty> runAndSubscribeOnUpdate(
        Model.GlobalArgs request)     {
      return blockingServerStreamingCall(
          getChannel(), getRunAndSubscribeOnUpdateMethod(), getCallOptions(), request);
    }
    
    /**
     */
    public     Model.Empty callBehaviourFunctions(Model.Behaviour request)     {
      return blockingUnaryCall(
          getChannel(), getCallBehaviourFunctionsMethod(), getCallOptions(), request);
    }
    
    /**
     */
    public     Model.Snapshot requestSnapshot(Model.Empty request)     {
      return blockingUnaryCall(
          getChannel(), getRequestSnapshotMethod(), getCallOptions(), request);
    }
    
    /**
     */
    public     Model.Empty pause(Model.Empty request)     {
      return blockingUnaryCall(
          getChannel(), getPauseMethod(), getCallOptions(), request);
    }
    
    /**
     */
    public     Model.Empty resume(Model.Empty request)     {
      return blockingUnaryCall(
          getChannel(), getResumeMethod(), getCallOptions(), request);
    }
    
    /**
     */
    public     Model.Empty stop(Model.Empty request)     {
      return blockingUnaryCall(
          getChannel(), getStopMethod(), getCallOptions(), request);
    }
  }
  
  /**
   */
  public static final class APIFutureStub extends io.grpc.stub.AbstractStub<APIFutureStub> {
    private APIFutureStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private APIFutureStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected APIFutureStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new APIFutureStub(channel, callOptions);
    }
    
    /**
     */
    public     com.google.common.util.concurrent.ListenableFuture<Model.ModelState> connect(
        Model.Empty request)     {
      return futureUnaryCall(
          getChannel().newCall(getConnectMethod(), getCallOptions()), request);
    }
    
    /**
     */
    public     com.google.common.util.concurrent.ListenableFuture<Model.Empty> run(
        Model.GlobalArgs request)     {
      return futureUnaryCall(
          getChannel().newCall(getRunMethod(), getCallOptions()), request);
    }
    
    /**
     */
    public     com.google.common.util.concurrent.ListenableFuture<Model.Empty> callBehaviourFunctions(
        Model.Behaviour request)     {
      return futureUnaryCall(
          getChannel().newCall(getCallBehaviourFunctionsMethod(), getCallOptions()), request);
    }
    
    /**
     */
    public     com.google.common.util.concurrent.ListenableFuture<Model.Snapshot> requestSnapshot(
        Model.Empty request)     {
      return futureUnaryCall(
          getChannel().newCall(getRequestSnapshotMethod(), getCallOptions()), request);
    }
    
    /**
     */
    public     com.google.common.util.concurrent.ListenableFuture<Model.Empty> pause(
        Model.Empty request)     {
      return futureUnaryCall(
          getChannel().newCall(getPauseMethod(), getCallOptions()), request);
    }
    
    /**
     */
    public     com.google.common.util.concurrent.ListenableFuture<Model.Empty> resume(
        Model.Empty request)     {
      return futureUnaryCall(
          getChannel().newCall(getResumeMethod(), getCallOptions()), request);
    }
    
    /**
     */
    public     com.google.common.util.concurrent.ListenableFuture<Model.Empty> stop(
        Model.Empty request)     {
      return futureUnaryCall(
          getChannel().newCall(getStopMethod(), getCallOptions()), request);
    }
  }
  
  private static final int METHODID_CONNECT = 0;
  private static final int METHODID_RUN = 1;
  private static final int METHODID_RUN_AND_SUBSCRIBE_ON_UPDATE = 2;
  private static final int METHODID_CALL_BEHAVIOUR_FUNCTIONS = 3;
  private static final int METHODID_REQUEST_SNAPSHOT = 4;
  private static final int METHODID_PAUSE = 5;
  private static final int METHODID_RESUME = 6;
  private static final int METHODID_STOP = 7;
  
  private static final class MethodHandlers<Req, Resp> implements
      io.grpc.stub.ServerCalls.UnaryMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ServerStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ClientStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.BidiStreamingMethod<Req, Resp> {
    private final APIImplBase serviceImpl;
    private final int methodId;
  
    MethodHandlers(APIImplBase serviceImpl, int methodId) {
      this.serviceImpl = serviceImpl;
      this.methodId = methodId;
    }
  
    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public void invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        case METHODID_CONNECT:
          serviceImpl.connect((Model.Empty) request,
              (io.grpc.stub.StreamObserver<Model.ModelState>) responseObserver);
          break;
        case METHODID_RUN:
          serviceImpl.run((Model.GlobalArgs) request,
              (io.grpc.stub.StreamObserver<Model.Empty>) responseObserver);
          break;
        case METHODID_RUN_AND_SUBSCRIBE_ON_UPDATE:
          serviceImpl.runAndSubscribeOnUpdate((Model.GlobalArgs) request,
              (io.grpc.stub.StreamObserver<Model.Empty>) responseObserver);
          break;
        case METHODID_CALL_BEHAVIOUR_FUNCTIONS:
          serviceImpl.callBehaviourFunctions((Model.Behaviour) request,
              (io.grpc.stub.StreamObserver<Model.Empty>) responseObserver);
          break;
        case METHODID_REQUEST_SNAPSHOT:
          serviceImpl.requestSnapshot((Model.Empty) request,
              (io.grpc.stub.StreamObserver<Model.Snapshot>) responseObserver);
          break;
        case METHODID_PAUSE:
          serviceImpl.pause((Model.Empty) request,
              (io.grpc.stub.StreamObserver<Model.Empty>) responseObserver);
          break;
        case METHODID_RESUME:
          serviceImpl.resume((Model.Empty) request,
              (io.grpc.stub.StreamObserver<Model.Empty>) responseObserver);
          break;
        case METHODID_STOP:
          serviceImpl.stop((Model.Empty) request,
              (io.grpc.stub.StreamObserver<Model.Empty>) responseObserver);
          break;
        default:
          throw new AssertionError();
      }
    }
    
    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public io.grpc.stub.StreamObserver<Req> invoke(
        io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        default:
          throw new AssertionError();
      }
    }
  }
  
  private static volatile io.grpc.ServiceDescriptor serviceDescriptor;
  
  public static io.grpc.ServiceDescriptor getServiceDescriptor() {
    io.grpc.ServiceDescriptor result = serviceDescriptor;
    if (result == null) {
      synchronized (APIGrpc.class) {
        result = serviceDescriptor;
        if (result == null) {
          serviceDescriptor = result = io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)              
              .setSchemaDescriptor(null)              
              .addMethod(getConnectMethod())              
              .addMethod(getRunMethod())              
              .addMethod(getRunAndSubscribeOnUpdateMethod())              
              .addMethod(getCallBehaviourFunctionsMethod())              
              .addMethod(getRequestSnapshotMethod())              
              .addMethod(getPauseMethod())              
              .addMethod(getResumeMethod())              
              .addMethod(getStopMethod())              
              .build();
        }
      }
    }
    return result;
  }
}
