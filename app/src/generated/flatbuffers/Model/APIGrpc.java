//Generated by flatc compiler (version 2.0.0)
//If you make any local changes, they will be lost
//source: Model.fbs

package Model;

import com.google.flatbuffers.grpc.FlatbuffersUtils;

import java.nio.ByteBuffer;
import static io.grpc.MethodDescriptor.generateFullMethodName;
import static io.grpc.stub.ClientCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ClientCalls.asyncClientStreamingCall;
import static io.grpc.stub.ClientCalls.asyncServerStreamingCall;
import static io.grpc.stub.ClientCalls.asyncUnaryCall;
import static io.grpc.stub.ClientCalls.blockingServerStreamingCall;
import static io.grpc.stub.ClientCalls.blockingUnaryCall;
import static io.grpc.stub.ClientCalls.futureUnaryCall;
import static io.grpc.stub.ServerCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ServerCalls.asyncClientStreamingCall;
import static io.grpc.stub.ServerCalls.asyncServerStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnaryCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall;

/**
 */
@javax.annotation.Generated(
    value = "by gRPC proto compiler",
    comments = "Source: Model.fbs")
public final class APIGrpc {

  private APIGrpc() {}
  
  public static final String SERVICE_NAME = "Model.API";
  
  // Static method descriptors that strictly reflect the proto.
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  @java.lang.Deprecated // Use {@link #getGetSnapshotMethod()} instead. 
  public static final io.grpc.MethodDescriptor<Model.InputData,
      Model.Snapshot> METHOD_GET_SNAPSHOT = getGetSnapshotMethod();
  
  private static volatile io.grpc.MethodDescriptor<Model.InputData,
      Model.Snapshot> getGetSnapshotMethod;
  
  private static volatile FlatbuffersUtils.FBExtactor<Model.InputData> extractorOfInputData;
  private static FlatbuffersUtils.FBExtactor<Model.InputData> getExtractorOfInputData() {
      if (extractorOfInputData != null) return extractorOfInputData;
      synchronized (APIGrpc.class) {
          if (extractorOfInputData != null) return extractorOfInputData;
          extractorOfInputData = new FlatbuffersUtils.FBExtactor<Model.InputData>() {
              public Model.InputData extract (ByteBuffer buffer) {
                  return Model.InputData.getRootAsInputData(buffer);
              }
          };
          return extractorOfInputData;
      }
  }
  
  private static volatile FlatbuffersUtils.FBExtactor<Model.Snapshot> extractorOfSnapshot;
  private static FlatbuffersUtils.FBExtactor<Model.Snapshot> getExtractorOfSnapshot() {
      if (extractorOfSnapshot != null) return extractorOfSnapshot;
      synchronized (APIGrpc.class) {
          if (extractorOfSnapshot != null) return extractorOfSnapshot;
          extractorOfSnapshot = new FlatbuffersUtils.FBExtactor<Model.Snapshot>() {
              public Model.Snapshot extract (ByteBuffer buffer) {
                  return Model.Snapshot.getRootAsSnapshot(buffer);
              }
          };
          return extractorOfSnapshot;
      }
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static io.grpc.MethodDescriptor<Model.InputData,
      Model.Snapshot> getGetSnapshotMethod() {
    io.grpc.MethodDescriptor<Model.InputData, Model.Snapshot> getGetSnapshotMethod;
    if ((getGetSnapshotMethod = APIGrpc.getGetSnapshotMethod) == null) {
      synchronized (APIGrpc.class) {
        if ((getGetSnapshotMethod = APIGrpc.getGetSnapshotMethod) == null) {
          APIGrpc.getGetSnapshotMethod = getGetSnapshotMethod = 
              io.grpc.MethodDescriptor.<Model.InputData, Model.Snapshot>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "Model.API", "GetSnapshot"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  Model.InputData.class, getExtractorOfInputData()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  Model.Snapshot.class, getExtractorOfSnapshot()))
                  .setSchemaDescriptor(null)
                  .build();
          }
        }
     }
     return getGetSnapshotMethod;
  }
  
  /**
   * Creates a new async stub that supports all call types for the service
   */
  public static APIStub newStub(io.grpc.Channel channel) {
    return new APIStub(channel);
  }
  
  /**
   * Creates a new blocking-style stub that supports unary and streaming output calls on the service
   */
  public static APIBlockingStub newBlockingStub(
      io.grpc.Channel channel) {
    return new APIBlockingStub(channel);
  }
  
  /**
   * Creates a new ListenableFuture-style stub that supports unary calls on the service
   */
  public static APIFutureStub newFutureStub(
      io.grpc.Channel channel) {
    return new APIFutureStub(channel);
  }
  
  /**
   */
  public static abstract class APIImplBase implements io.grpc.BindableService {
    
    /**
     */
    public     void getSnapshot(Model.InputData request,
        io.grpc.stub.StreamObserver<Model.Snapshot> responseObserver)     {
      asyncUnimplementedUnaryCall(getGetSnapshotMethod(), responseObserver);
    }
    
    @java.lang.Override public final io.grpc.ServerServiceDefinition bindService() {
      return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())
          .addMethod(
            getGetSnapshotMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                Model.InputData,
                Model.Snapshot>(
                  this, METHODID_GET_SNAPSHOT)))
          .build();
    }
  }
  
  /**
   */
  public static final class APIStub extends io.grpc.stub.AbstractStub<APIStub> {
    private APIStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private APIStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected APIStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new APIStub(channel, callOptions);
    }
    
    /**
     */
    public     void getSnapshot(Model.InputData request,
        io.grpc.stub.StreamObserver<Model.Snapshot> responseObserver)     {
      asyncUnaryCall(
          getChannel().newCall(getGetSnapshotMethod(), getCallOptions()), request, responseObserver);
    }
  }
  
  /**
   */
  public static final class APIBlockingStub extends io.grpc.stub.AbstractStub<APIBlockingStub> {
    private APIBlockingStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private APIBlockingStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected APIBlockingStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new APIBlockingStub(channel, callOptions);
    }
    
    /**
     */
    public     Model.Snapshot getSnapshot(Model.InputData request)     {
      return blockingUnaryCall(
          getChannel(), getGetSnapshotMethod(), getCallOptions(), request);
    }
  }
  
  /**
   */
  public static final class APIFutureStub extends io.grpc.stub.AbstractStub<APIFutureStub> {
    private APIFutureStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private APIFutureStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected APIFutureStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new APIFutureStub(channel, callOptions);
    }
    
    /**
     */
    public     com.google.common.util.concurrent.ListenableFuture<Model.Snapshot> getSnapshot(
        Model.InputData request)     {
      return futureUnaryCall(
          getChannel().newCall(getGetSnapshotMethod(), getCallOptions()), request);
    }
  }
  
  private static final int METHODID_GET_SNAPSHOT = 0;
  
  private static final class MethodHandlers<Req, Resp> implements
      io.grpc.stub.ServerCalls.UnaryMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ServerStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ClientStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.BidiStreamingMethod<Req, Resp> {
    private final APIImplBase serviceImpl;
    private final int methodId;
  
    MethodHandlers(APIImplBase serviceImpl, int methodId) {
      this.serviceImpl = serviceImpl;
      this.methodId = methodId;
    }
  
    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public void invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        case METHODID_GET_SNAPSHOT:
          serviceImpl.getSnapshot((Model.InputData) request,
              (io.grpc.stub.StreamObserver<Model.Snapshot>) responseObserver);
          break;
        default:
          throw new AssertionError();
      }
    }
    
    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public io.grpc.stub.StreamObserver<Req> invoke(
        io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        default:
          throw new AssertionError();
      }
    }
  }
  
  private static volatile io.grpc.ServiceDescriptor serviceDescriptor;
  
  public static io.grpc.ServiceDescriptor getServiceDescriptor() {
    io.grpc.ServiceDescriptor result = serviceDescriptor;
    if (result == null) {
      synchronized (APIGrpc.class) {
        result = serviceDescriptor;
        if (result == null) {
          serviceDescriptor = result = io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)              
              .setSchemaDescriptor(null)              
              .addMethod(getGetSnapshotMethod())              
              .build();
        }
      }
    }
    return result;
  }
}
